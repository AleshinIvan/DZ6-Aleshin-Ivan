#1
Конструктор по умолчанию
Конструктор Копирования
Оператор присваивания копий
Деструктор
Конструктор перемещения
Двигаться оператора присваивания

#2
Следующие операторы перегружать можно:
+
-
/
*
++
--
Следующие операторы перегружать нельзя:
?: (тернарный оператор);
:: (доступ к вложенным именам);
. (доступ к полям);
.* (доступ к полям по указателю);
sizeof, typeid и операторы каста.
Следующие операторы можно перегрузить только в качестве методов:
= (присваивание);
-> (доступ к полям по указателю);
() (вызов функции);
[] (доступ по индексу);
->* (доступ к указателю-на-поле по указателю);

#3
В качестве функции перегрузки используется метод operator int(). 
Обратите внимание, между словом operator и типом, в который мы хотим 
выполнить конвертацию (в данном случае, тип int), находится пробел.
Функция перегрузки не имеет типа возврата. Язык C++ предполагает, что вы будете возвращать корректный тип.

#4
Исторически lvalue – это то, что может быть слева от оператора присваивания, 
а rvalue – то, что может быть только справа.
Однако, такое определение несколько упрощает и искажает суть. 
Стандарт C89 определял lvalue как object locator, т.е. объект с идентифицируемым 
местом в памяти. Соответственно, всё, что не подходило под это определение, входило в категорию rvalue.

#5
Ссылки r-value имеют два полезных свойства:
Они увеличивают продолжительность жизни объекта, которым инициализируются, 
до продолжительности жизни ссылки r-value (ссылки l-value на константные объекты также могут это делать).
Неконстантные ссылки r-value позволяют нам изменять значения r-values, на которые указывают ссылки r-value!

#6
Благодаря своему устройству семантика перемещения работает гораздо быстрее копирования.

#7
Функция std::move() — это стандартная библиотечная функция, которая конвертирует передаваемый аргумент в r-value. 
Мы можем передать l-value в функцию std::move(), и std::move() вернет нам ссылку r-value. Для работы с std::move() 
нужно подключить заголовочный файл utility.

#8
Конструктором перемещения и оператором присваивания перемещения.

#9/#10
Программист может запретить генерацию специальных функций-членов, в С++11 надо применить при объявлении конструкцию 
"=delete", в С++98 объявить соответствующую функцию-член закрытой и не определять. При наследовании классов, 
запрет генерации специальной функции-члена, сделанный в базовом классе, распространяется на все производные классы.
Если программиста устраивает функции-члены, генерируемые компилятором, то в С++11 он может обозначить это явно, 
а не просто опустив объявление. Для этого при объявлении надо использовать конструкцию "=default", 
код при этом лучше читается и появляется дополнительные возможности, связанные с управлением уровнем доступа.
